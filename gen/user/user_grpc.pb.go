// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserServes_ListUser_FullMethodName    = "/user.UserServes/ListUser"
	UserServes_ProfileUser_FullMethodName = "/user.UserServes/ProfileUser"
	UserServes_CreateUser_FullMethodName  = "/user.UserServes/CreateUser"
)

// UserServesClient is the client API for UserServes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServesClient interface {
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	ProfileUser(ctx context.Context, in *ProfileUserRequest, opts ...grpc.CallOption) (*ProfileUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type userServesClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServesClient(cc grpc.ClientConnInterface) UserServesClient {
	return &userServesClient{cc}
}

func (c *userServesClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, UserServes_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServesClient) ProfileUser(ctx context.Context, in *ProfileUserRequest, opts ...grpc.CallOption) (*ProfileUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileUserResponse)
	err := c.cc.Invoke(ctx, UserServes_ProfileUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServesClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserServes_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServesServer is the server API for UserServes service.
// All implementations must embed UnimplementedUserServesServer
// for forward compatibility
type UserServesServer interface {
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	ProfileUser(context.Context, *ProfileUserRequest) (*ProfileUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedUserServesServer()
}

// UnimplementedUserServesServer must be embedded to have forward compatible implementations.
type UnimplementedUserServesServer struct {
}

func (UnimplementedUserServesServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServesServer) ProfileUser(context.Context, *ProfileUserRequest) (*ProfileUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileUser not implemented")
}
func (UnimplementedUserServesServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServesServer) mustEmbedUnimplementedUserServesServer() {}

// UnsafeUserServesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServesServer will
// result in compilation errors.
type UnsafeUserServesServer interface {
	mustEmbedUnimplementedUserServesServer()
}

func RegisterUserServesServer(s grpc.ServiceRegistrar, srv UserServesServer) {
	s.RegisterService(&UserServes_ServiceDesc, srv)
}

func _UserServes_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServesServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServes_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServesServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServes_ProfileUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServesServer).ProfileUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServes_ProfileUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServesServer).ProfileUser(ctx, req.(*ProfileUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServes_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServes_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServesServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServes_ServiceDesc is the grpc.ServiceDesc for UserServes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserServes",
	HandlerType: (*UserServesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _UserServes_ListUser_Handler,
		},
		{
			MethodName: "ProfileUser",
			Handler:    _UserServes_ProfileUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserServes_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
